# Importing necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

file_path = 'stock_data.csv'
# Load the dataset
def load_data(file_path):
    return pd.read_csv(file_path)

# Preprocess the data
def preprocess_data(data):
    # Convert Date column to datetime
    data['Date'] = pd.to_datetime(data['Date'])
    # Sort the dataframe by Date
    data.sort_values(by='Date', inplace=True)
    return data

# Feature engineering
def feature_engineering(data):
    # Adding new features if needed
    # For simplicity, we'll use only the 'Close' price as a feature
    return data[['Close']]

# Split data into training and testing sets
def split_data(features, target):
    return train_test_split(features, target, test_size=0.2, random_state=42)

# Train the model
def train_model(X_train, y_train):
    model = LinearRegression()
    model.fit(X_train, y_train)
    return model

# Evaluate the model
def evaluate_model(model, X_test, y_test):
    predictions = model.predict(X_test)
    mse = mean_squared_error(y_test, predictions)
    return mse

# Visualize predictions
def visualize_results(actual, predicted):
    plt.figure(figsize=(10, 6))
    plt.plot(actual, color='blue', label='Actual')
    plt.plot(predicted, color='red', label='Predicted')
    plt.title('Stock Price Prediction')
    plt.xlabel('Time')
    plt.ylabel('Price')
    plt.legend()
    plt.show()

# Main function
def main():
    # Load data
    data = load_data('stock_data.csv')

    # Preprocess data
    data = preprocess_data(data)

    # Feature engineering
    features = feature_engineering(data)

    # Target variable
    target = data['Close']

    # Split data
    X_train, X_test, y_train, y_test = split_data(features, target)

    # Train the model
    model = train_model(X_train, y_train)

    # Evaluate the model
    mse = evaluate_model(model, X_test, y_test)
    print("Mean Squared Error:", mse)

    # Visualize results
    visualize_results(y_test, model.predict(X_test))

if __name__ == "__main__":
    main()
